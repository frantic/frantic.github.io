<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://frantic.im/</id>
  <title>frantic.im</title>
  <link rel="self" href="https://frantic.im/feed.xml" />
  <icon>https://frantic.im/favicon.png</icon>
  <subtitle>Occasional posts on technology and stuff</subtitle>
  <updated>2025-03-30T17:31:13.198Z</updated>
  <author>
    <name>Alex Kotliarskyi</name>
  </author>

  
    <entry>
      <id>https://frantic.im/caring-about-software-quality-is-getting-harder</id>
      <title>Caring about software quality is getting harder</title>
      <updated>2025-03-30T12:00:00+00:00</updated>

      <link rel="alternate" href="https://frantic.im/caring-about-software-quality-is-getting-harder" />
      <summary></summary>
      <content type="html"><![CDATA[
        
        
        
        <p>In 2017 I gave a <a href="https://www.youtube.com/watch?v=fjS5ssBn3fA">talk</a> at Chain React about building great user experiences with React Native. At the time the tech was new and the quality of the mobile apps built with React Native was poor. The gist of my talk was that it’s possible to build great apps with React Native, one just needs to care enough.</p>
<p>My message didn’t resonate as well as I’d hoped. It’s hard to make people care about quality when the measuring stick of the technology is “look how fast I made this cross-platform app”. In contrast, inside the early iOS dev community, caring for quality was something that everyone shared.</p>
<p>The modern generation of users grew up without knowing what it feels like to use an offline, low-latency, well-crafted apps and websites. There’s little incentive now to spend any resources on improving quality, while your competition spends it on more features and ads.</p>
<p>I love my AI tools. They cured me from <a href="https://frantic.im/side-projects-are-hard">the blank page curse</a>, they help me learn new tech much faster, and produce boring boilerplate code.</p>
<p>But they also make it easier than ever to not care about quality…</p>

      ]]></content>
    </entry>
  
    <entry>
      <id>https://frantic.im/hn-stack</id>
      <title>The Hacker News Stack</title>
      <updated>2025-01-28T12:00:00+00:00</updated>

      <link rel="alternate" href="https://frantic.im/hn-stack" />
      <summary>If you want to build a web app The Hacker News Way, here's the stack you should use.</summary>
      <content type="html"><![CDATA[
        
        
        
        <p>If you want to build a web app The Hacker News Way, here’s the stack you should use:</p>
<ul>
<li><strong>Rust</strong> – the only language that gives you the priviledge of calling your app <em>“blazing fast”</em>. According to the undocumented Hacker News rules, any post mentioning Rust in the title starts with 10 points.</li>
<li><strong>Postgres</strong> – the most beloved database that can do absolutely everything: manage data, handle row-level authorization, run job queues, replace Redis, vacuum your apartment (or its own tables… who cares?). No ORMs allowed.</li>
<li><strong>HTMX</strong> – because JavaScript is obviously the worst part about web development. Bonus points: you get to call yourself the <a href="https://htmx.org/essays/lore/#htmx-ceo">CEO of HTMX</a>, very helpful in this turbulent job market.</li>
<li><strong>Hetzner</strong> – for just $4.59/mo you can get a server that can easily handle HN’s famous <a href="https://news.ycombinator.com/item?id=20147951">hug-of-death</a>.</li>
</ul>
<p>Make sure you build your app while WFH, commuting to the office was invented by evil corporations.</p>
<p>…</p>
<p>If this post made your simle, maybe you should cut down on reading Hacker News. I know I should.</p>

      ]]></content>
    </entry>
  
    <entry>
      <id>https://frantic.im/best-tool</id>
      <title>No Best Tool For The Job</title>
      <updated>2024-06-19T12:00:00+00:00</updated>

      <link rel="alternate" href="https://frantic.im/best-tool" />
      <summary>How do you choose the best tool for the job?</summary>
      <content type="html"><![CDATA[
        
        
        
        <p>How do you choose the best tool for the job?</p>
<p>Suppose you want to plant a tree in your backyard and need to dig a hole. You go to the nearby hardware supply store and see these options:</p>
<p><img src="/figma/graden_tools_options.png" alt="" /></p>
<p>You don’t have to be a PhD in Gardening to know which tool is best for the job. It’s self-evident from the size of the tool and its cost.</p>
<p>The next day you decide to build a web app. You go to a catalog of website-building tools and you see this:</p>
<p><img src="/figma/web_app_tools_options.png" alt="" /></p>
<p>Let’s imagine for a moment that you are relatively new to programming. How would you pick the best tool for the job here?</p>
<h2>All these programming tools look the same</h2>
<p>Unlike tools for digging holes, all these websites look the same. They all promise the same thing — build your web app. It’s not clear why you’d pick one tool over the other. So you dig a little deeper…</p>
<h2>Infinite fractal of categorization</h2>
<p>…and discover an almost infinite amount of specialization. With hardware tools, the categories are more defined: here’s a shovel, and here’s an excavator. There’s nothing in between. With programming languages and frameworks, for any two tools, there seems to be another tool in between.</p>
<p>The job of evaluating the tools becomes harder than the job of actually using the tool.</p>
<p>You could just pick any tool and get started, but…</p>
<h2>Too easy to choose the wrong tool</h2>
<p>With hardware tools, the price and the size of the tool give you a strong hint of what it is best for. Sure, using an excavator to dig a hole for a tree sounds like a ton of fun, but buying or renting one is way too expensive. Plus, you need to learn how to drive one, get a license, and it definitely doesn’t fit into your backyard.</p>
<p>With software tools, it costs almost nothing to choose the wrong tool for the job. They all optimize for getting started quickly. Building a static website with GraphQL — easy. Use Kafka for a one-person backoffice app — no problem. You can spin up both in under 5 minutes, for free.</p>
<p>So how are you supposed to make a good choice for your web app? Well, you could search for some advice on Reddit, X, or HackerNews…</p>
<h2>Advice overload</h2>
<p>…and get overwhelmed with the amount of opposite opinions. “React is the best” / “React is the worst”, you should always render things on the server, you should make a single page app, use static types, use dynamic types, functional programming is the way, functional programming is too slow. The list of contradictions goes on and on.</p>
<p>The people shouting the advice sound extremely confident. If you dig deeper, some of them are actually employed by the tech stack they are preaching, but even outside of obvious economic incentives, it’s just too much noise to sort through.</p>
<p>Meta advice is just as polarized. “Pick a tool you already know” vs “learn new things”, “choose a popular tech stack with a large community” vs “choose niche tech stack with a great community”, “focus on clean code” vs “focus on business outcomes”.</p>
<p>—</p>
<p>So my mind gets <a href="https://frantic.im/side-projects-are-hard/">stuck</a> on this one. How do you pick the best tool for the job?</p>
<p>The only way out of this pickle situation I found so far is to turn around and face the question itself. What does “the best” even mean?</p>
<p>Back to the tree planting, the choice is simple, so it’s obvious which tool is the best. In programming, we no longer have <a href="https://youtu.be/0Ttw9ks05G4?si=XR4z-Jwj825p7fkI&amp;t=222">that luxury</a>, thus maybe the concept of “the best” doesn’t work anymore. The options are just too close, too nuanced, and the consequences are too fuzzy. Even if you are an expert in these tools, there are still enough unknowns to make the choice non-trivial.</p>
<p>When the options can’t be plotted on a single axis with clear “good” and “bad” fits, there’s no “best”. There’s only “good enough”. And if we give up chasing “the best tool for the job”, we might just free up enough mental space to use “the good enough tool” to actually plant that tree.</p>

      ]]></content>
    </entry>
  
    <entry>
      <id>https://frantic.im/opening-mail</id>
      <title>Opening Mail</title>
      <updated>2024-01-06T12:00:00+00:00</updated>

      <link rel="alternate" href="https://frantic.im/opening-mail" />
      <summary>First make the change easy, then make the easy change.</summary>
      <content type="html"><![CDATA[
        
        
        
        <p>I never liked opening envelopes; they’re tricky and ripping them open is annoying. My letters would get stuck or tear with the envelope.</p>
<p>The mail just used to stack up, and I’d miss important stuff because of it.</p>
<p>But then I found this cool little gadget from Japan.</p>
<a style="border: none" href="https://www.amazon.com/dp/B001GR4DQ8" target="_blank">
  <img src="https://frantic.im/assets/ceramic-letter-opener.jpg" width="256">
</a>
<p>It’s well-made, affordable, and feels good to use. Plus, it’s safe.</p>
<p>The best part? It actually made me enjoy opening my mail.</p>
<p>After this experience, I started thinking differently about unpleasent tasks. Is there a tool or a service that add delight to mundane things?</p>
<p>I also started noticing when people do this subconiously. For example, most software engineers I know hate blogging, but they like building their own blog engine to make blogging more pleasant (I’m very guilty of this too).</p>
<p>Kent Beck <a href="https://twitter.com/KentBeck/status/250733358307500032">nailed it</a>: “for each desired change, make the change easy (warning: this may be hard), then make the easy change”.</p>

      ]]></content>
    </entry>
  
    <entry>
      <id>https://frantic.im/whos-watching-the-watchdog</id>
      <title>Who&#39;s watching the watchdog?</title>
      <updated>2023-11-22T12:00:00+00:00</updated>

      <link rel="alternate" href="https://frantic.im/whos-watching-the-watchdog" />
      <summary>Making reliable systems that expect things to go wrong</summary>
      <content type="html"><![CDATA[
        
        
        
        <p>At my current company we have an automated pipeline for processing customer’s orders. It’s pretty complex — talking to multiple different services, training models, storing large files, updating the database, sending emails and push notifications.</p>
<p>Sometimes things get stuck because of a temporary 3rd party outage or a bug in our code.</p>
<p>So we built a watchdog service: it monitors the stream of orders and makes sure the orders get processed within reasonable timeframe (3 hours). The watchdog only looks at the final invariant — was the order fulfilled and delivered to the customer? It doesn’t care about any intermediary steps.</p>
<p>This system has saved us many times. When the watchdog finds a stuck order, it posts in our special channel in Slack. We investigate the problem and address the root cause, so hopefully we won’t see new orders stuck for the same reason.</p>
<p>But who’s watching the watchdog? What if it fails to run?</p>
<p>It actually happened to us once. The watchdog is running on the job scheduling system, and that system went down. That meant no orders were getting processed and watchdog also wasn’t running. The alerts channel in Slack was blissfully silent.</p>
<p>To address this case, we need a system that can watch the watchdog. We are using these two:</p>
<ul>
<li><a href="https://docs.sentry.io/product/crons/">Sentry Cron</a></li>
<li><a href="https://www.checklyhq.com/blog/heartbeat-monitoring-with-checkly/">Checkly Heartbeat</a></li>
</ul>
<p>The idea behind both systems is the same: they expect a regular cron job to “check in” on a pre-defined schedule. If it misses a check-in, there’s likely a problem and we get an alert in Slack.</p>
<p>Complex systems always find surprising ways to fail. When adding an end-to-end quality watchdog (and ways to watch the watchdog) you can create a positive loop of detecting issues and hardening the system.</p>

      ]]></content>
    </entry>
  
    <entry>
      <id>https://frantic.im/hacker-gifts</id>
      <title>A side project story: Hacker Gifts</title>
      <updated>2023-10-29T12:00:00+00:00</updated>

      <link rel="alternate" href="https://frantic.im/hacker-gifts" />
      <summary>This is a story about a side project that I started in 2018, and the reasons I'm shuting it down.</summary>
      <content type="html"><![CDATA[
        
        
        
        <p><em>This is a story about a side project, <a href="https://hacker.gifts/">Hacker Gifts</a>, that I started in 2018, and the reasons I’m shutting it down.</em></p>
<p>February 2018. London, 9 pm. It’s dark outside and raining. Vlad is holding a flashlight and is looking for… something. One hour ago a girl he didn’t know gave him two numbers over the phone and hung up. The numbers looked like GPS coordinates not too far from his house, so Vlad decided to check it out. The people on the street are gazing at Vlad suspiciously, and all he can think about is “How did I get into all of this?”</p>
<p>He got into all of that because of me.</p>
<p>Vlad is my close friend. He has everything (or means of getting everything) that most people would consider a “birthday gift”. I wanted to give him something special that he’ll remember for the rest of his life.</p>
<p>At first, the idea was simple — write a greetings message, encode it as a QR code and send it via mail. But that would have been too easy for Vlad. So, inspired by great movies like <a href="https://www.imdb.com/title/tt0119174/">The Game (1997)</a>, <a href="https://www.imdb.com/title/tt1677720/">Ready Player One (2018)</a> and <a href="https://www.imdb.com/title/tt4158110/">Mr. Robot</a>, I dialed it up.</p>
<p>In the QR-encoded letter I had a link to a file with a private SSH key and an IP address (encoded as an obscure Japanese poem). The server had a Tetris game running on it (Vlad <em>loves</em> Tetris), and once he got through that he saw instructions to send 1 satoshi to a Bitcoin address. After verifying the transaction a script gave him the next SSH key, but this time it was encrypted with a password, and the password was inside of an armv6 binary hosted on IPFS that required a PIN. Bruteforcing the PIN took more than 4 hours on a Raspberry Pi. This time the note instructed Vlad to wait for a phone call. I put the third key on a flash drive and hid it under a bench in a park in London, and asked my cousin to give Vlad a call and tell him the GPS coordinates. The password to the last key was encoded as a Branf*ck program in a BMP file. Using the third key Vlad got to a VNC session on a virtual machine running Windows 3.1, where he had to find a file hidden on a virtual floppy drive. The file had a link to 90s-style webpage with a birthday greeting on it. Happy Birthday, Vlad!</p>
<p><img src="https://frantic.im/assets/hacker-gifts/happy-birthday.jpg" alt="Early version of hacker.gifts website" /></p>
<p>It took me more than 2 months to set this all up. Vlad really liked the experience. I was proud.</p>
<h2>Into production</h2>
<p>If Vlad liked it, maybe others will like it too?</p>
<p>I’ve decided to productionalize my learning and make it so anyone could get a similar puzzle. I really wanted to make the puzzle feel personal: it should know the name of the person who’s solving it, and at the end should reveal a secret message.</p>
<p>At first, I wanted to send physical postcards, but I stumbled on way too many issues. The printing quality was always a problem. During the delivery, USPS scratched the postcard with the QR code and it didn’t always read correctly. Delivery sometimes took more than a week. In addition, many people didn’t want to leave their physical address, and the recipient could mistake the postcard for spam.</p>
<p>I decided to shift the focus exclusively to the digital aspect. Buyers can print it themselves, transfer it to their phone, or hide it on their desktop.</p>
<p><img src="https://frantic.im/assets/hacker-gifts/01-Hacker-Gifts.png" alt="Early version of hacker.gifts website" /></p>
<h2>Tech stack</h2>
<p>I remember wasting <em>a lot</em> of time on which framework to use to build the website. The classic software engineering side project dilemmas. I was agonizing about this until one night I forked $32 for a Shopify store. It wasn’t perfect by my standards, but it definitely unlocked everything else.</p>
<p>At first, I processed all orders manually. Shopify sends me a push notification, I run to the computer and quickly enter the data into a local script, then send the result by mail.</p>
<p>In early days the adrenaline from every $20 brought a thrill. But I quickly got tired of getting up in the middle of the night. In addition, I wanted to create a pleasant impression and instant free delivery.</p>
<p>It was time for <em>Automation</em>. Shopify can call a webhook for each order, and there I can generate a new postcard and send it by mail.</p>
<p>I started with a microservice zoo — a script in Ruby, an AWS lambda in Node.js, order data in DynamoDB, files in S3, Mailchimp, all seasoned with a bit of Zapier. I tried to keep each individual thing very simple, but the result turned out to be a complexity monster. Debugging stuck orders was hell.</p>
<p>When the COVID hit, I <a href="https://frantic.im/back-to-rails">rewrote everything in Ruby on Rails</a>. Because Rails is an established framework, I didn’t need to reinvent the wheel at every step. I’ve got proper tests, queues, database, caching — all working in a nice consistent setup that didn’t rely on 3rd party services.</p>
<p><img src="https://frantic.im/assets/hacker-gifts/tests.png" alt="Sweet Rails tests" /></p>
<h2>Growth and marketing</h2>
<p>When I started, I knew absolutely nothing about growth and marketing.</p>
<p>I remember spending my first $250 on ads — it got me ~200 likes on Facebook and zero orders. I tuned creative, targeting, copy — all with virtually no results. The problem was that I didn’t know how to position and explain my product. But I also <a href="https://medium.com/@andreamantovani/known-knowns-known-unknowns-unknown-unknowns-leadership-367f346b0953">didn’t know I didn’t know that</a>. Frustrating times.</p>
<p>I found my first customers in a local Bay Area group for spouses of software engineers who worked for tech companies. Posting there felt very uncomfortable, but 30 minutes later I sold my first item!</p>
<p>Since then, the product has grown mostly through word-of-mouth and organic Google search.</p>
<p>I struggled with positioning the product until I read <a href="https://www.momtestbook.com/">The Mom Test</a>. That book really opened my eyes to what questions to ask, and I’ve made many improvements to the website since then.</p>
<p>After much trial and error, I have identified two target audiences:</p>
<ul>
<li>Nerds who love side projects and fun puzzles. My product resonated with them once they dug deeper, but getting them to notice it was a challenge — these folks are completely blind to advertising and popular social media.</li>
<li>Regular people who don’t understand the technology, but who want a thoughtful gift for a programmer. They look at Facebook and click on ads, but it’s difficult to convey the value of such a gift.</li>
</ul>
<p><img src="https://frantic.im/assets/hacker-gifts/latest-landing-page.png" alt="Improved hacker.gifts landing page" /></p>
<h2>Costs and profits</h2>
<p>Technically the project is profitable. Here are some numbers from 2020, recent years were in the same ballpark.</p>
<p>Typically I charged $19.99 for a puzzle, sometimes giving a discount.</p>
<p>For the period from September 1, 2019 to September 1, 2020, there were 170 orders, with a total revenue of $3,162.50.</p>
<p><img src="https://frantic.im/assets/hacker-gifts/03-Revenue.png" alt="Improved hacker.gifts landing page" /></p>
<p>Shopify eats ~4% from each transaction, charges $32/mo for the service and $36 for the domain.</p>
<p>The backend needs a server on Heroku ($7/mo), Postgres DB ($10/mo) and one VPS ($10/mo) for the quest + domain ($13/y).</p>
<p>Total expenses: $757.</p>
<p>Profit $3,162.50 - 4% - $757 = $2,279.</p>
<p>On the one hand, it’s very good for a pet project. In 2019, the project barely broke even. 2021-2023 were similar to 2020.</p>
<p>But there’s one set of numbers that I’m really proud of.</p>
<p><img src="https://frantic.im/assets/hacker-gifts/02-Survey.png" alt="Improved hacker.gifts landing page" /></p>
<p>At the end of the puzzle I have a small form for feedback. Not everyone fills it out, but this is what the statistics look like. Reading the feedback always made me smile. I’ve collected some on the <a href="https://hacker.gifts/blogs/guides/testimonials">testimonials</a> page.</p>
<h2>Shutting It Down</h2>
<p>For the last few years, I haven’t touched the project much. But there’s no such thing as a truly passive side project.</p>
<p>I’m always anxious something is going to break and users won’t get their order. I have alerts for errors and watchdogs, but still feel the responsibility to deliver a great experience hanging over my shoulders.</p>
<p>The tech is also not helping: every bit of my stack is aging fast, and without constant support the cost of any change grows. “The Heroku-18 stack is end-of-life” is April next year, but I know if I start updating it, something else will pop up — new Rails version, DB upgrade, certificates, etc. Even with fewer moving pieces than before, maintenance is not trivial.</p>
<p>But the most important reason I’m shutting it down is to give space for new ideas to grow. In its current state, <a href="https://hacker.gifts">Hacker Gifts</a> still occupies my headspace that I could use for other things.</p>
<p>Looking back, this project definitely fits the category of “a solution in search of a problem”. But I don’t blame myself. IMHO the solution is really clever, I haven’t seen anything like this anywhere before. I also really enjoyed building it, and I learned a ton about marketing, customer interviews, ads, and many other things.</p>
<p>If you read this far and would like to try it out for free, use code <code>FRANTIC</code> at checkout <a href="https://hacker.gifts/">here</a>. I’ll keep the servers up until Jan 2024. Also check out <a href="https://robertovaccari.com/blog/2021_02_14_hacker_gifts/">Roberto Vaccari’s</a> review (spoilers!)</p>

      ]]></content>
    </entry>
  
    <entry>
      <id>https://frantic.im/story-behind-hackathon-photo</id>
      <title>Story Behind Hackathon Photo</title>
      <updated>2023-07-04T12:00:00+00:00</updated>

      <link rel="alternate" href="https://frantic.im/story-behind-hackathon-photo" />
      <summary>How a random stream of events ended up creating a picture with 57 million views</summary>
      <content type="html"><![CDATA[
        
        
        
        <p>I’ve seen <a href="https://unsplash.com/photos/QBpZGqEMsKg">this photo</a> on the internet, sometimes even billboards and posters. Maybe you’ve seen it too? Here’s the story behind it.</p>
<p><img src="https://frantic.im/assets/hackathon.jpg" alt="" /></p>
<p>In 2017 I was working on React Native team. We were friends with all other developer experience teams around Facebook. One of them worked on <a href="https://nuclide.io/">Nuclide</a> (RIP), a set of plugins for Atom editor turning it into multi-platform IDE. Nuclide struggled with adoption outside Facebook walls.</p>
<p>Around that time, Unsplash was becoming very popular. They were the first to provide high quality stock photos for free (very bold strategy for its time). Their photos were spreading like a wildfire.</p>
<p>So I had this “genius” idea: make a photo of MacBook Pro with Atom/Nuclide running on it, upload it to Unsplash and get programming blog posts use it as their cover photo (for free). People will notice a cool looking editor and will start asking “what is it?”, eventually finding Nuclide (now you know why I’m not working in marketing).</p>
<p>I took my old Canon 6D to the office and we did a photoshoot. I uploaded the picture (along with others from my Lightroom collection, to make it less sketchy).</p>
<p><img src="https://frantic.im/assets/nuclide.jpg" alt="Nuclide/Atom on MacBook Pro" /></p>
<p>The plan didn’t work. The image got some downloads, but not much. It was lost in a sea of similar pictures. A year later, Facebook gave up on Nuclide and marketing efforts became irrelevant.</p>
<p>However, one thing came out of this process I did not expect.</p>
<p>Together with the Nuclide photo, I uploaded a picture I took that year in Ukraine. I was a judge at <a href="https://www.devchallenge.it/">DevChallenge</a> hackathon in Kyiv, and during the break I snapped a few photos with a wide 24mm lens. I really liked how concentrated everyone was, staff members walking the rows, the uniformity, lighting, stickers on the notebooks. I don’t think the photo was very good by photography standards, but I loved the spirit of that place and wanted to capture it.</p>
<p><img src="https://frantic.im/assets/hackathon_lightroom.png" alt="Other pictures from that hackathon in Kyiv" /></p>
<p>During the uploading process Unsplash asked if I wanted to submit my pictures to their first ever “Unsplash Awards” and I thought “sure why not?”.</p>
<p>I forgot about this for a while, until several months later I got an email from Unspash notifying me that I won <a href="https://awards.unsplash.com/2017/#/tech-and-business">“Unsplash Awards 2017” in “Tech and business”</a>.</p>
<blockquote>
<p>In a way, Alex’s photo captures a reflection of modern life: staring at a screen. Our lives, especially in our twenties, feels like a competition. From school, to university, to getting a job and progressing through our careers – it’s a never ending competition. The photo draws your eyes out across the rows of workers, all seemingly identical – but at the same time, showing small hints of color and personality from every worker that highlight and humanizes their unique history and personality. It makes me think of 20 years from now, what technology will be ubiquitous.
– Niv Dror, ProductHunt/Angelist</p>
</blockquote>
<p>They sent me a bunch of cool prizes: PeakDesign Messenger bag, straps and clips, Moment lens for iPhone, and even a printed version of my photo.</p>
<p>Now, looking at it, I do regret not processing the picture more: the horizon line is a bit tilted, you can spot chromatic abberation, the windows are overexposed.</p>
<p>Today that picture has 57 million views and used all over the internet. It even ended up on <a href="https://news.ycombinator.com/item?id=21010674">Hacker News</a> with the classic “It looks like a sweatshop” and “exact type of workplace I wouldn’t want anyone to end up” comments.</p>
<p>Conclusions? None, I guess. I just love how a stream of random events brought this to life.</p>

      ]]></content>
    </entry>
  
    <entry>
      <id>https://frantic.im/javascript-gom-jabbar</id>
      <title>JavaScript Gom Jabbar</title>
      <updated>2023-06-29T12:00:00+00:00</updated>

      <link rel="alternate" href="https://frantic.im/javascript-gom-jabbar" />
      <summary>What's inside that package.json? Pain.</summary>
      <content type="html"><![CDATA[
        
        
        
        <p>You have been using JavaScript for 10 years. It’s time for your test. You are sitting in front of a computer. The test is simple: you have to open a package.json file and read it. The <code>package.json</code> is full of pain. You have to read it all.</p>
<p>You look at <code>version</code>, you haven’t reached 1.0 yet. Semver causes unpleasant memories, but you’ve learned to ignore them for so long that you don’t even notice the tickling sensation in your skull.</p>
<p>You wish you used a different <code>name</code> for your package, but some random internet person has squatted that name 7 years ago and never updated their package since. It’s only mildly discomforting. Maybe the test isn’t so bad after all?</p>
<p>Both <code>main</code> and <code>browser</code> fields are present, you sense traces of Isomorphic JavaScript. In a flash, you remember requiring <code>fs</code> module from your browser bundle. These memories are very unpleasant. The hacks you had to do to make it work were even more unpleasant.</p>
<p>The <code>type</code> is set to <code>module</code>. This has something to do with the migration from <code>requires</code> to <code>imports</code>. Why do we have to care about this, again? The extensive pain you’ve experienced trying to importing ES5 modules from ESM modules and vice versa overwhelms you again.</p>
<p>You make your way to <code>scripts</code>. What a hot, painful mess it is. You can’t look at them without your heart rate going to 150. lint, lintall, lintfast, lintdiff. Parallel runs, obscure arguments, double-escaping JSON-formatted arguments. Subcommands calling npm even through you switched to yarn and then pnpm. Thousands of variations, premutations and details make you shiver. Why do these things have to be here? Why do they need to be so complicated?</p>
<p>Some scripts still use <code>watchman</code>. Gotta remember to not use symlinks because it doesn’t support them (and the issue has been open since 2015). There’s also this gulp-based script that nobody has the guts to replace with anything else that’s considered more modern. You think that there’s actually no modern version of gulp but it feels outdated and you definitely want to get rid of it. The pains spreads from your head into your neck and shoulders.</p>
<p>The pain is barely tolerable when you reach <code>dependencies</code>. So, so many of them. There’s <code>left-pad</code>, the legendary tiny package that broke all internet, collectively causing the amount of pain and drama comparable to the destruction of Alderaan.</p>
<p>Every time you modify dependency list, some of the dependencies print out screens-worth of messages to your console, asking for donations, warning about breaking changes. You gave up trying to understand these. You only hope none of them are malicious enough to steal your secrets or ruin your computer. The threat of potential pain of that magnitute is frighting.</p>
<p>There’s also moment.js. You love that library, it has a really pleasant API. But the internet decided it’s too “mutable”, too fat, it doesn’t support treeshaking and now you have to migrate to date-fns. You haven’t started yet, but you already feel the painful refactoring in your bones.</p>
<p>Looking at every package in that list causes some amount of trauma recall. But what’s even more concerning is that the version of these packages are way behind what’s considered “current”. You know that you should upgrade them. But you also have tried that before and you know how much suffering it brings. Things will break in so many ways, big and loud ways, small and subtle ways.</p>
<p>The next thing in this damn file is <code>resolutions</code>. Yes, you remember this one. It’s a suffering you choose to avoid dealing with package upgrades.</p>
<p>You scroll down to <code>devDependencies</code>. You can’t remember the time when you only needed non-dev dependencies. Why do we have this split? Yes, right, to cause more pain.</p>
<p><code>eslint</code>. Its configuration got so strict that you can’t even write code anymore. Any small misstep and you get an angry red underline. Your CI is configured to treat any lint problem as the end of the world. It gives a false sense of security to your junior engineers on the team. You survived serveral holy wars on which rules to enable. The pain is proportional to the amount of <code>eslint-ignore</code>s you have all over your codebase. There’s a lot.</p>
<p>You also notice <code>postcss</code> hiding there. This package is a mystery to you. You don’t use it directly, it’s a requirement of a dependency of a dependency. But it’s the package that’s constantly causing you pain by throwing obscure C++ compilation errors on any new platform you try to <code>npm install</code> on. If CSS itself wasn’t painful enough.</p>
<p>Oh, dear <code>jest</code>. It started as a fast test runner. But now it’s big and fat, it depends on some babel packages while the rest of your app is transpiled by a mix of esbuild and swc. Properly configuring it with ESM and TypeScript was a PhD science project.</p>
<p>You stop to count how many tools and parsers work on your codebase: TypeScript, esbuild, swc, babel, eslint, prettier, jest, webpack, rollup, terser. You are not sure if you missed any. You are not sure if you want to know. The level of pain is so high you forget about anything else.</p>
<p><code>engines</code> prominently lists <code>node</code>. And while you hate it with the depth of your soul, you are not going to Bun or Deno because you know this will not stop the pain. This will only make the pain worse.</p>
<p>It’s the end of the file now. Final closing curly brace. You close the tab and take a breath. Look around. You are still alive, your hands and your brain intact. You survived. For now.</p>

      ]]></content>
    </entry>
  
    <entry>
      <id>https://frantic.im/shuhari</id>
      <title>Shuhari</title>
      <updated>2023-06-18T12:00:00+00:00</updated>

      <link rel="alternate" href="https://frantic.im/shuhari" />
      <summary>Follow the rules, break the rules, transcend the rules</summary>
      <content type="html"><![CDATA[
        
        
        
        <p>I’ve been trying to write a blog post about following “best practices” and how eventually you end up breaking them. But I couldn’t find the right words until I randomly stumbled upon a concept from Japanese martial art: <a href="https://en.wikipedia.org/wiki/Shuhari">Shuhari</a>.</p>
<blockquote>
<p>It is known that, when we learn or train in something, we pass through the stages of shu, ha, and ri. These stages are explained as follows. In shu, we repeat the forms and discipline ourselves so that our bodies absorb the forms that our forebears created. We remain faithful to these forms with no deviation. Next, in the stage of ha, once we have disciplined ourselves to acquire the forms and movements, we make innovations. In this process the forms may be broken and discarded. Finally, in ri, we completely depart from the forms, open the door to creative technique, and arrive in a place where we act in accordance with what our heart/mind desires, unhindered while not overstepping laws.</p>
</blockquote>
<p>To me, this explains everything I see in the software development industry.</p>
<p>First, we follow the rules. Learn best practices. Read the <a href="https://en.wikipedia.org/wiki/Design_Patterns">Gang of Four</a>. “Keep it simple, stupid”, “Do not repeat yourself”. <em>shu</em>.</p>
<p>Then, we rebel and break the rules. NoSQL, React, Rails and many others were the expression of breaking the established best practices. <em>ha</em>.</p>
<p>Finally, we transcend the rules. There are no rules and no breaking the rules. You just do. <em>ri</em>.</p>
<p>A beginner following tech Twitter or Hacker News nowadays will be very confused. Some people preach best practices, others are loudly recommend breaking them. <small>(Unfortunately you rarely see anything from those who transcend them.)</small></p>
<p>People who grew up writing simple HTML and JS see React as breaking the rules. People who grew up writing React see <a href="https://htmx.org/">HTMX</a> as breaking the rules. And this process will never end.</p>
<p>We need to realize is that everyone is on a different stage of this process. It doesn’t help the beginner to be thrown into “ha”: it will only confuse them.</p>
<p>So should you follow the best practices of clean code? Well, yes and no: <a href="https://overreacted.io/goodbye-clean-code/">“Let clean code guide you. Then let it go.”</a></p>

      ]]></content>
    </entry>
  
    <entry>
      <id>https://frantic.im/disposable-software</id>
      <title>Disposable Software</title>
      <updated>2023-03-27T12:00:00+00:00</updated>

      <link rel="alternate" href="https://frantic.im/disposable-software" />
      <summary>Questioning the status quo of software maintenance</summary>
      <content type="html"><![CDATA[
        
        
        
        <p>Few weeks ago my microwave stopped working. I called several repair shops and they all told me the same thing: “just buy a new one, it’s cheaper than what we’ll charge for fixing it”.</p>
<p>Maintaining software projects costs a lot of money. Thousands of books have been written on “clean code” and “best practices”, all focused on driving the maintanance costs down. Every company or team I worked on has a similar story: “we built this prototype in just a few weeks, but now it’s a mess and we can’t add new features”. Building something new is fun, maintaining old legacy systems is not fun.</p>
<p>To add to the problem, businesses don’t understand the maintanance costs. After you ship a feature, the business considers it “done”. If you want to address tech debt, systematic bugs, refactorings, library upgrades, etc. it takes a lot of explanations and convincing. And even if you manage to get the budget, it’s not a priority. The business likes to ship new features, not maintain the old ones.</p>
<p>But what if there was a magic tool. A tool that could build an app for your from scratch every time something about buisness domain changes. And it will use the latest libraries, latest best practices, hottest programming language. And it will be fast (minutes) and cheap (few dollars worth of GPU time).</p>
<p>What would the world look like if we got rid of software maintanance costs?</p>
<p>–</p>
<p>Oh, about the microwave. I bought a new one, same brand and same model name. The new microwave sucks: the build quality is low, it’s loud. I want my old microwave back.</p>

      ]]></content>
    </entry>
  
</feed>